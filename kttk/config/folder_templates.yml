# Folder templates config with this syntax:
# top level key defines entity type, for example project

# with folders, the folders are specified
# each folder is a dict with a list of folders.
# If a folder has no subfolders -> specified as string
# If a folder has subfolders -> specified as dict with folders as strings and dicts
# Each folder name can contain {tokens}

# instead of a folders, you can specify a text file to create with __file__
# name specifies the file name and content the text file content. Content can contain {tokens}

project:
    folders:
        "{project_root}/{project_name}":
            - Assets
            - Shots
asset: 
    folders:
        "{project_root}/{project_name}/Assets/{asset_type}/{code}":
            - "{code}_Alembic"
            - "{code}_Textures"
            - "{code}_Input_2D"
            - "{code}_Input_3D"
            - "{code}_Maya":
                - __file__ :
                             name: workspace.mel
                             content: '
                                      workspace -ot "scene" "{dcc_scenes_location_asset_maya}";
                                      workspace -ot "mayaAscii" "{dcc_scenes_location_asset_maya}";
                                      workspace -ot "mayaBinary" "{dcc_scenes_location_asset_maya}";
                                      workspace -rt "images" "{asset_renderoutput_3D}";
                                      workspace -fr "alembicCache" "{asset_alembic}";
                                      workspace -fr "movie" "asset_playblast_location";
                                      '
            - "{code}_out":
                - playblast
shot:
    folders:
        "{project_root}/{project_name}/Shots/{code}":
            - "{code}_Alembic"
            - "{code}_Textures"
            - "{code}_Input_2D"
            - "{code}_Input_3D"
            - "{code}_Maya":
                - __file__ :
                             name: workspace.mel
                             content: '
                                      workspace -ot "scene" "{dcc_scenes_location_shot_maya}";
                                      workspace -ot "mayaAscii" "{dcc_scenes_location_shot_maya}";
                                      workspace -ot "mayaBinary" "{dcc_scenes_location_shot_maya}";
                                      workspace -rt "images" "{shot_renderoutput_3D}";
                                      workspace -fr "alembicCache" "{shot_alembic}";
                                      workspace -fr "movie" "shot_playblast_location";
                                      '
            - "{code}_out":
                - playblast
task:
    folders:
            "": ""
